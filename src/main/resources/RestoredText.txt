 Механизм , связывающий код и данные , которыми он манипулирует , защищая оба 
 эти компонента от внешнего вмешательства и злоупотреблений , называется инкапсуляцией. Инкапсуляцию можно считать защитной оболочкой , которая предохраняет код и данные от произвольного доступа со стороны другого кода , находящегося 
 снаружи оболочки. Доступ к коду и данным , находящимся внутри оболочки , строго 
 контролируется тщательно определенным интерфейсом. Чтобы провести аналогию 
 с реальным миром , рассмотрим автоматическую коробку передач автомобиля. 
 Она инкапсулирует немало сведений об автомобиле , в том числе величину ускорения , крутизну поверхности , по которой совершается движение , а также положение 
 рычага переключения скоростей. Пользователь  ( в данном случае водитель ) может 
 оказывать влияние на эту сложную инкапсуляцию только одним способом : перемещая рычаг переключения скоростей. На коробку передач нельзя воздействовать , 
 например , с помощью индикатора поворота или дворников. Таким образом , рычаг 
 переключения скоростей является строго определенным , а по существу , единственным , интерфейсом с коробкой передач. Более того , происходящее внутри коробки 
 передач не влияет на объекты , находящиеся вне ее. Например , переключение передач не включает фары! Функция автоматического переключения передач инкапсулирована , и поэтому десятки изготовителей автомобилей могут реализовать ее как 
 угодно. Но с точки зрения водителя все эти коробки передач работают одинаково. 
 Аналогичный принцип можно применять и в программировании. Сильная сторона 
 инкапсулированного кода состоит в следующем : всем известно , как получить доступ 
 к нему , а следовательно , его можно использовать независимо о подробностей реализации и не опасаясь неожиданных побочных эффектов. 
 Основу инкапсуляции в Java составляет класс. Подробнее классы будут рассмотрены в последующих главах , а до тех пор полезно дать хотя бы краткое их описание. 
 Класс определяет структуру и поведение  ( данные и код )  , которые будут совместно 
 использоваться набором объектов. Каждый объект данного класса содержит структуру и поведение , которые определены классом , как если бы объект был отлит 
 в форме класса. Поэтому иногда объекты называют экземплярами класса. Таким образом , класс  - это логическая конструкция , а объект  - ее физическое воплощение. 